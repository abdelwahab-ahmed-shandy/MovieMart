// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieMart.Data;

#nullable disable

namespace MovieMart.Migrations
{
    [DbContext(typeof(MovieMartDbContext))]
    partial class MovieMartDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieMart.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Anime filled with action and adventure.",
                            Name = "Shonen"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Anime for mature audiences.",
                            Name = "Seinen"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Anime with magical and supernatural elements.",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Futuristic anime with advanced technology.",
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("MovieMart.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The protagonist of Naruto, dreams of becoming Hokage.",
                            Name = "Naruto Uzumaki"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Naruto’s rival, seeking revenge against his brother Itachi.",
                            Name = "Sasuke Uchiha"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Captain of the Survey Corps, known for his unmatched combat skills.",
                            Name = "Levi Ackerman"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Main protagonist of Attack on Titan, fights against the Titans.",
                            Name = "Eren Yeager"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A teenage girl who swaps bodies with a boy from Tokyo in 'Your Name'.",
                            Name = "Mitsuha Miyamizu"
                        });
                });

            modelBuilder.Entity("MovieMart.Models.CharacterMovie", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("CharacterMovies");

                    b.HasData(
                        new
                        {
                            CharacterId = 5,
                            MovieId = 1
                        });
                });

            modelBuilder.Entity("MovieMart.Models.CharacterTvSeries", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "TvSeriesId");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("CharacterTvSeries");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            TvSeriesId = 1
                        },
                        new
                        {
                            CharacterId = 2,
                            TvSeriesId = 1
                        },
                        new
                        {
                            CharacterId = 3,
                            TvSeriesId = 2
                        },
                        new
                        {
                            CharacterId = 4,
                            TvSeriesId = 2
                        });
                });

            modelBuilder.Entity("MovieMart.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = new TimeSpan(0, 0, 23, 0, 0),
                            EpisodeNumber = 1,
                            SeasonId = 1,
                            Title = "Enter: Naruto Uzumaki!"
                        },
                        new
                        {
                            Id = 2,
                            Duration = new TimeSpan(0, 0, 23, 0, 0),
                            EpisodeNumber = 2,
                            SeasonId = 1,
                            Title = "My Name is Konohamaru!"
                        },
                        new
                        {
                            Id = 3,
                            Duration = new TimeSpan(0, 0, 23, 0, 0),
                            EpisodeNumber = 3,
                            SeasonId = 1,
                            Title = "Sasuke and Sakura: Friends or Foes?"
                        },
                        new
                        {
                            Id = 4,
                            Duration = new TimeSpan(0, 0, 25, 0, 0),
                            EpisodeNumber = 1,
                            SeasonId = 2,
                            Title = "To You, in 2000 Years: The Fall of Shiganshina"
                        },
                        new
                        {
                            Id = 5,
                            Duration = new TimeSpan(0, 0, 25, 0, 0),
                            EpisodeNumber = 2,
                            SeasonId = 2,
                            Title = "That Day: The Fall of Shiganshina, Part 2"
                        },
                        new
                        {
                            Id = 6,
                            Duration = new TimeSpan(0, 0, 25, 0, 0),
                            EpisodeNumber = 3,
                            SeasonId = 2,
                            Title = "A Dim Light Amid Despair: Humanity's Comeback"
                        },
                        new
                        {
                            Id = 7,
                            Duration = new TimeSpan(0, 0, 24, 0, 0),
                            EpisodeNumber = 1,
                            SeasonId = 3,
                            Title = "I'm Luffy! The Man Who's Gonna Be King of the Pirates!"
                        },
                        new
                        {
                            Id = 8,
                            Duration = new TimeSpan(0, 0, 24, 0, 0),
                            EpisodeNumber = 2,
                            SeasonId = 3,
                            Title = "Enter the Great Swordsman! Pirate Hunter Roronoa Zoro"
                        },
                        new
                        {
                            Id = 9,
                            Duration = new TimeSpan(0, 0, 24, 0, 0),
                            EpisodeNumber = 3,
                            SeasonId = 3,
                            Title = "Morgan vs. Luffy! Who's This Beautiful Young Girl?"
                        });
                });

            modelBuilder.Entity("MovieMart.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Makoto Shinkai",
                            CategoryId = 3,
                            Description = "A heartwarming story of two teenagers swapping bodies across time.",
                            Duration = new TimeSpan(0, 1, 46, 0, 0),
                            ImgUrl = "yourname.jpg",
                            Price = 12.99,
                            Rating = 8.8000000000000007,
                            ReleaseYear = 2016,
                            StartDate = new DateTime(2016, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Your Name"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Hayao Miyazaki",
                            CategoryId = 3,
                            Description = "A young girl must navigate a magical world to save her parents.",
                            Duration = new TimeSpan(0, 2, 5, 0, 0),
                            ImgUrl = "spiritedaway.jpg",
                            Price = 14.99,
                            Rating = 8.9000000000000004,
                            ReleaseYear = 2001,
                            StartDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spirited Away"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Katsuhiro Otomo",
                            CategoryId = 4,
                            Description = "A cyberpunk masterpiece exploring a dystopian Tokyo.",
                            Duration = new TimeSpan(0, 2, 4, 0, 0),
                            ImgUrl = "akira.jpg",
                            Price = 10.99,
                            Rating = 8.0999999999999996,
                            ReleaseYear = 1988,
                            StartDate = new DateTime(1988, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Akira"
                        });
                });

            modelBuilder.Entity("MovieMart.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TvSeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TvSeriesId");

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ReleaseYear = 2002,
                            SeasonNumber = 1,
                            Title = "Naruto - Season 1",
                            TvSeriesId = 1
                        },
                        new
                        {
                            Id = 2,
                            ReleaseYear = 2003,
                            SeasonNumber = 2,
                            Title = "Naruto - Season 2",
                            TvSeriesId = 1
                        },
                        new
                        {
                            Id = 3,
                            ReleaseYear = 2004,
                            SeasonNumber = 3,
                            Title = "Naruto - Season 3",
                            TvSeriesId = 1
                        },
                        new
                        {
                            Id = 4,
                            ReleaseYear = 2013,
                            SeasonNumber = 1,
                            Title = "Attack on Titan - Season 1",
                            TvSeriesId = 2
                        },
                        new
                        {
                            Id = 5,
                            ReleaseYear = 2017,
                            SeasonNumber = 2,
                            Title = "Attack on Titan - Season 2",
                            TvSeriesId = 2
                        },
                        new
                        {
                            Id = 6,
                            ReleaseYear = 2018,
                            SeasonNumber = 3,
                            Title = "Attack on Titan - Season 3",
                            TvSeriesId = 2
                        });
                });

            modelBuilder.Entity("MovieMart.Models.TvSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TvSeries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Masashi Kishimoto",
                            Description = "A young ninja seeks recognition and dreams of becoming the Hokage.",
                            ImgUrl = "naruto.jpg",
                            Rating = 8.3000000000000007,
                            ReleaseYear = 2002,
                            Title = "Naruto"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Hajime Isayama",
                            Description = "Humanity fights for survival against terrifying Titans.",
                            ImgUrl = "aot.jpg",
                            Rating = 9.0999999999999996,
                            ReleaseYear = 2013,
                            Title = "Attack on Titan"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Eiichiro Oda",
                            Description = "Monkey D. Luffy sets sail to find the legendary One Piece treasure.",
                            ImgUrl = "onepiece.jpg",
                            Rating = 9.0,
                            ReleaseYear = 1999,
                            Title = "One Piece"
                        });
                });

            modelBuilder.Entity("MovieMart.Models.CharacterMovie", b =>
                {
                    b.HasOne("MovieMart.Models.Character", "Character")
                        .WithMany("CharacterMovies")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieMart.Models.Movie", "Movie")
                        .WithMany("CharacterMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieMart.Models.CharacterTvSeries", b =>
                {
                    b.HasOne("MovieMart.Models.Character", "Character")
                        .WithMany("CharacterTvSeries")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieMart.Models.TvSeries", "TvSeries")
                        .WithMany("Characters")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("MovieMart.Models.Episode", b =>
                {
                    b.HasOne("MovieMart.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MovieMart.Models.Movie", b =>
                {
                    b.HasOne("MovieMart.Models.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MovieMart.Models.Season", b =>
                {
                    b.HasOne("MovieMart.Models.TvSeries", "TvSeries")
                        .WithMany("Seasons")
                        .HasForeignKey("TvSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvSeries");
                });

            modelBuilder.Entity("MovieMart.Models.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieMart.Models.Character", b =>
                {
                    b.Navigation("CharacterMovies");

                    b.Navigation("CharacterTvSeries");
                });

            modelBuilder.Entity("MovieMart.Models.Movie", b =>
                {
                    b.Navigation("CharacterMovies");
                });

            modelBuilder.Entity("MovieMart.Models.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("MovieMart.Models.TvSeries", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
